<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace：命名空间，对应于Mapper接口，用于绑定Mapper接口和Mapper.xml文件。
    例如：namespace="com.niit.subtitletranslationtool.mapper.UserMapper"，
    表示此Mapper.xml文件对应于UserMapper接口。
-->
<mapper namespace="com.niit.subtitletranslationtool.mapper.UserMapper">

    <!--
        resultMap：结果映射，用于定义数据库字段和实体类属性之间的映射关系。
        id：resultMap的唯一标识符，可以在select语句中引用。
        type：实体类的完整类名。
    -->
    <resultMap id="UserResultMap" type="com.niit.subtitletranslationtool.entity.User">
        <!-- id标签：定义主键字段的映射 -->
        <id property="id" column="id"/>
        <!-- result标签：定义普通字段的映射 -->
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="balance" column="balance"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!--
        insert：插入语句，用于向数据库中插入数据。
        id：insert语句的唯一标识符，对应于Mapper接口中的方法名。
        parameterType：输入参数的类型，这里是User实体类。
        useGeneratedKeys：是否使用数据库自动生成的主键。
        keyProperty：实体类中对应主键的属性名。
        keyColumn：数据库表中对应主键的字段名。
    -->
    <insert id="insertUser" parameterType="com.niit.subtitletranslationtool.entity.User"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <!--
            SQL 插入语句，向 user 表中插入一条新记录。
            username, password, email, balance, created_at, updated_at 字段的值分别从传入的 User 对象的对应属性中获取。
        -->
        INSERT INTO user (
            username,
            password,
            email,
            balance,
            created_at,
            updated_at
        ) VALUES (
            #{username},
            #{password},
            #{email},
            #{balance},
            #{createdAt},
            #{updatedAt}
        )
    </insert>

    <!--
        select：查询语句，用于从数据库中查询数据。
        id：select语句的唯一标识符，对应于Mapper接口中的方法名。
        resultMap：指定结果映射，将查询结果映射到UserResultMap定义的实体类属性中。
    -->
    <select id="findByUsername" resultMap="UserResultMap">
        <!--
            SQL 查询语句，根据用户名查询用户信息。
            查询 user 表中 username 字段与传入的 username 参数相匹配的记录。
        -->
        SELECT id, username, password, email, balance, created_at, updated_at
        FROM user
        WHERE username = #{username}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="findByEmail" resultMap="UserResultMap">
        <!--
            SQL 查询语句，根据邮箱查询用户信息。
            查询 user 表中 email 字段与传入的 email 参数相匹配的记录。
        -->
        SELECT id, username, password, email, balance, created_at, updated_at
        FROM user
        WHERE email = #{email}
    </select>

    <!-- 根据ID查询用户 -->
    <select id="findById" resultMap="UserResultMap">
        <!--
            SQL 查询语句，根据用户ID查询用户信息。
            查询 user 表中 id 字段与传入的 id 参数相匹配的记录。
        -->
        SELECT id, username, password, email, balance, created_at, updated_at
        FROM user
        WHERE id = #{id}
    </select>

    <!--
        update：更新语句，用于更新数据库中的数据。
        id：update语句的唯一标识符，对应于Mapper接口中的方法名。
        parameterType：输入参数的类型，这里是User实体类。
    -->
    <update id="updateUser" parameterType="com.niit.subtitletranslationtool.entity.User">
        <!--
            SQL 更新语句，根据传入的 User 对象的属性值更新 user 表中的记录。
            更新 username, password, email, balance, updated_at 字段，条件是 id 字段与传入的 User 对象的 id 属性相匹配。
        -->
        UPDATE user
        SET
            username = #{username},
            password = #{password},
            email = #{email},
            balance = #{balance},
            updated_at = #{updatedAt}
        WHERE
            id = #{id}
    </update>

    <select id="findAllUsers" resultMap="UserResultMap">
        <!--
            SQL 查询语句，查询所有用户信息。
            查询 user 表中的所有记录。
        -->
        SELECT id, username, password, email, balance, created_at, updated_at
        FROM user
    </select>

    <delete id="deleteUser" parameterType="long">
        <!--
            SQL 删除语句，根据用户ID删除用户信息。
            删除 user 表中 id 字段与传入的 id 参数相匹配的记录。
        -->
        DELETE FROM user WHERE id = #{id}
    </delete>

    <select id="countAllUsers" resultType="int">
        <!--
            SQL 查询语句，统计用户总数。
            查询 user 表中的记录总数。
        -->
        SELECT COUNT(*) FROM user
    </select>

    <select id="findRecentUsers" parameterType="int" resultMap="UserResultMap">
        <!--
            SQL 查询语句，查询最近注册的用户信息。
            从 user 表中按照 created_at 字段降序排序，并限制返回的记录数为传入的 limit 参数。
        -->
        SELECT id, username, password, email, balance, created_at, updated_at
        FROM user
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

    <select id="countDailyNewUsers" resultType="map">
        <!--
            SQL 查询语句，统计每日新增用户数量。
            该查询使用复杂的 SQL 语句生成一个日期范围，并与 user 表进行左连接，统计每天的新增用户数量。
            结果集包含 date（日期）和 count（新增用户数量）两个字段。
        -->
        SELECT
            DATE_FORMAT(date_range.date, '%Y-%m-%d') AS date,
            IFNULL(user_counts.count, 0) AS count
        FROM (
                 SELECT
                     DATE_SUB(CURDATE(), INTERVAL (t4.i*1000 + t3.i*100 + t2.i*10 + t1.i) DAY) AS date
                 FROM
                     (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t1,
                     (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t2,
                     (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t3,
                     (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t4
                 WHERE
                     (t4.i*1000 + t3.i*100 + t2.i*10 + t1.i) <![CDATA[ <= ]]> #{days}
                   AND DATE_SUB(CURDATE(), INTERVAL (t4.i*1000 + t3.i*100 + t2.i*10 + t1.i) DAY) >= DATE_SUB(CURDATE(), INTERVAL #{days} DAY)
             ) date_range
                 LEFT JOIN (
            SELECT
                DATE(created_at) AS date,
                COUNT(*) AS count
            FROM user
            WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL #{days} DAY)
            GROUP BY DATE(created_at)
        ) user_counts ON date_range.date = user_counts.date
        ORDER BY date_range.date ASC
    </select>

</mapper>